// Functions

// Unit Conversion

// strip-unit($num)
//
// Strip units from values.
//
// $num       - Value to be stripped.
// @returns   - number
// @source    - http://hugogiraudel.com/2013/08/12/sass-functions

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// em()
//
//  Convert pixel values to ems.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function em($target, $context: $base-font-size) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}
// rem()
//
// Convert pixel values to rems.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function rem($target, $context: $base-font-size) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target / $context + 0rem;
}

// px()
//
// Convery em values to pixels.
//
// $target    - Value to convert to ems.
// $context   - The context the conversion is based on. Defaults to `$base-font-size`
// @requires  - `$base-font-size` / `@strip-units`
// @returns   - number
// @source    - http://www.pjmccormick.com/sweet-sass-function-convert-px-em

@function px($target, $context: $base-font-size) {
  @if not unitless($target) {
    $pxval: strip-units($target);
  }
  @if not unitless($context) {
    $base: strip-units($context);
  }
  @if $target == 0 { @return 0 }
  @return $target * $context + 0px;
}

// Map Functions
//
// Styleguide 11.2

// map-has-nested-keys($map)
//
// $map       - Parent map to get values from.
// @returns   - boolean
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  } @return true;
}

// map-deep-get($map)
//
// $map       - Parent map to get values from.
// @returns   - `$map`
// @source    - http://www.sitepoint.com/better-solution-managing-z-index-sass/

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  } @return $map;
}

// z()
//
// @requires  - `@map-has-nested-keys` / `@map-deep-get` / `$zindex`
// @returns   - `map-deep-get($zindex, $indexes...)`
// @source    - http://www.sitepoint.com/extra-map-functions-sass/

@function z($indexes...) {
  @if not map-has-nested-keys($zindex, $indexes...) {
    @warn 'No index found for `#{inspect($indexes...)}` in $zindex map. Property omitted.';
  } @return map-deep-get($zindex, $indexes...);
}

// bp()
//
// @requires  - `@map-has-nested-keys` / `@map-deep-get` / `$breakpoints`
// @returns   - `map-deep-get($breakpoints, $point...)`
// @source    - http://www.sitepoint.com/extra-map-functions-sass/

@function bp($point...) {
  @if not map-has-nested-keys($breakpoints, $point...) {
    @warn 'No breakpoint found for `#{inspect($point...)}` in $breakpoints map. Property omitted.';
  } @return map-deep-get($breakpoints, $point...);
}

@function get-dash-value($radius, $percentage) {
  // Using $radius, calculate circumference.
  $circumference: 2 * 3.1415927 * $radius;

  // Convert percentage to decimal.
  // i.e. 50% = 0.5.
  $percentage-as-decimal: $percentage / 100%;

  // Return unit value.
  @return $circumference * $percentage-as-decimal;
}

//
// More accurate font sizing (https://www.smashingmagazine.com/2017/05/fluid-responsive-typography-css-poly-fluid-sizing/)
// --------------------------------------------------
//
/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// h1 {
///   $map: (576px: 22px, 768px: 24px, 992px: 34px);
///   @include poly-fluid-sizing('font-size', $map);
/// }
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
        #{$property}: linear-interpolation-fallback((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
        #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
    }
  }

  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return calc(#{$m*100}vw #{$sign} #{$b});
}

@function linear-interpolation-fallback($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return #{$b};
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list,1);
    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }
  @return $sortedMap;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list,$i), 'space');
    }
  }
  @return $newList;
}
